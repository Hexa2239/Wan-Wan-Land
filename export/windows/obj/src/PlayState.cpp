// Generated by Haxe 4.3.4
#include <hxcpp.h>

#ifndef INCLUDED_Minawan
#include <Minawan.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxBasePoint
#include <flixel/math/FlxBasePoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_8_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",8,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_22_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",22,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_38_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",38,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_86_minawanGrabbing,"PlayState","minawanGrabbing",0xf6c89b90,"PlayState.minawanGrabbing","PlayState.hx",86,0xb30d7781)

void PlayState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_8_new)
HXLINE(  84)		this->droppingMinawan = false;
HXLINE(  17)		this->grabbing = false;
HXLINE(  15)		this->offset = 20;
HXLINE(  13)		this->direction = 1;
HXLINE(  12)		this->amountOfCharacters = 0;
HXLINE(  11)		this->minawanSprites = ::Array_obj< ::Dynamic>::__new();
HXLINE(   8)		super::__construct();
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x563293a6) {
			if (inClassId<=(int)0x0a05f89d) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
			} else {
				return inClassId==(int)0x563293a6;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_22_create)
HXLINE(  23)		 ::flixel::FlxSprite background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  24)		background->loadGraphic(HX_("assets/images/cerberMenu.png",24,d6,b0,25),null(),null(),null(),null(),null());
HXLINE(  25)		this->add(background);
HXLINE(  27)		 ::flixel::FlxSprite cerber =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  28)		cerber->set_y(( (Float)(400) ));
HXLINE(  29)		cerber->set_alpha(((Float)0.6));
HXLINE(  30)		{
HXLINE(  30)			int axes = 1;
HXDLIN(  30)			bool _hx_tmp;
HXDLIN(  30)			if ((axes != 1)) {
HXLINE(  30)				_hx_tmp = (axes == 17);
            			}
            			else {
HXLINE(  30)				_hx_tmp = true;
            			}
HXDLIN(  30)			if (_hx_tmp) {
HXLINE(  30)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  30)				cerber->set_x(((( (Float)(_hx_tmp1) ) - cerber->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  30)			bool _hx_tmp2;
HXDLIN(  30)			if ((axes != 16)) {
HXLINE(  30)				_hx_tmp2 = (axes == 17);
            			}
            			else {
HXLINE(  30)				_hx_tmp2 = true;
            			}
HXDLIN(  30)			if (_hx_tmp2) {
HXLINE(  30)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  30)				cerber->set_y(((( (Float)(_hx_tmp3) ) - cerber->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  31)		cerber->loadGraphic(HX_("assets/images/cerberSprite.png",0a,9e,60,95),null(),null(),null(),null(),null());
HXLINE(  32)		this->add(cerber);
HXLINE(  34)		this->super::create();
            	}


void PlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_38_update)
HXLINE(  39)		while((this->amountOfCharacters < 100)){
HXLINE(  41)			 ::Minawan character =  ::Minawan_obj::__alloc( HX_CTX );
HXLINE(  43)			int possible = ::flixel::FlxG_obj::random->_hx_int(0,1,null());
HXLINE(  44)			if ((possible == 1)) {
HXLINE(  45)				character->direction = -1;
            			}
            			else {
HXLINE(  47)				character->direction = 1;
            			}
HXLINE(  50)			Float silly = ::flixel::FlxG_obj::random->_hx_float(1,3,null());
HXLINE(  52)			character->set_x(( (Float)(::flixel::FlxG_obj::random->_hx_int(30,(::flixel::FlxG_obj::width - 50),null())) ));
HXLINE(  53)			character->set_y(((( (Float)((::flixel::FlxG_obj::height - 30)) ) - (silly * ( (Float)(10) ))) + this->offset));
HXLINE(  54)			character->loadGraphic(HX_("assets/images/minawan.png",e5,b3,5a,4f),null(),null(),null(),null(),null());
HXLINE(  55)			{
HXLINE(  55)				 ::flixel::math::FlxBasePoint this1 = character->scale;
HXDLIN(  55)				this1->set_x(silly);
HXDLIN(  55)				this1->set_y(silly);
            			}
HXLINE(  56)			this->add(character);
HXLINE(  57)			this->minawanSprites->push(character);
HXLINE(  58)			 ::PlayState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  58)			_hx_tmp->amountOfCharacters = (_hx_tmp->amountOfCharacters + 1);
            		}
HXLINE(  61)		{
HXLINE(  61)			int _g = 0;
HXDLIN(  61)			::Array< ::Dynamic> _g1 = this->minawanSprites;
HXDLIN(  61)			while((_g < _g1->length)){
HXLINE(  61)				 ::Minawan character1 = _g1->__get(_g).StaticCast<  ::Minawan >();
HXDLIN(  61)				_g = (_g + 1);
HXLINE(  62)				character1->set_x((character1->x + ((( (Float)((character1->direction * 100)) ) * elapsed) / ( (Float)(2) ))));
HXLINE(  64)				if ((character1->direction == -1)) {
HXLINE(  65)					character1->set_flipX(false);
            				}
            				else {
HXLINE(  67)					character1->set_flipX(true);
            				}
HXLINE(  71)				bool _hx_tmp1;
HXDLIN(  71)				if (!((character1->x <= 0))) {
HXLINE(  71)					Float character2 = character1->x;
HXDLIN(  71)					Float _hx_tmp2 = (character2 + character1->get_width());
HXDLIN(  71)					_hx_tmp1 = (_hx_tmp2 >= ::flixel::FlxG_obj::width);
            				}
            				else {
HXLINE(  71)					_hx_tmp1 = true;
            				}
HXDLIN(  71)				if (_hx_tmp1) {
HXLINE(  73)					 ::Minawan character3 = character1;
HXDLIN(  73)					character3->direction = (character3->direction * -1);
            				}
            			}
            		}
HXLINE(  79)		this->minawanGrabbing();
HXLINE(  81)		this->super::update(elapsed);
            	}


void PlayState_obj::minawanGrabbing(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_86_minawanGrabbing)
HXLINE(  88)		{
HXLINE(  88)			int _g = 0;
HXDLIN(  88)			::Array< ::Dynamic> _g1 = this->minawanSprites;
HXDLIN(  88)			while((_g < _g1->length)){
HXLINE(  88)				 ::Minawan minawan = _g1->__get(_g).StaticCast<  ::Minawan >();
HXDLIN(  88)				_g = (_g + 1);
HXLINE(  89)				bool _hx_tmp;
HXDLIN(  89)				if (::flixel::FlxG_obj::mouse->overlaps(minawan,null())) {
HXLINE(  89)					 ::flixel::input::mouse::FlxMouseButton _this = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(  89)					if ((_this->current != 1)) {
HXLINE(  89)						_hx_tmp = (_this->current == 2);
            					}
            					else {
HXLINE(  89)						_hx_tmp = true;
            					}
            				}
            				else {
HXLINE(  89)					_hx_tmp = false;
            				}
HXDLIN(  89)				if (_hx_tmp) {
HXLINE(  90)					this->grabbing = true;
HXLINE(  91)					this->minawanGrabbed = minawan;
            				}
            			}
            		}
HXLINE(  95)		bool _hx_tmp1;
HXDLIN(  95)		if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(  95)			_hx_tmp1 = (this->grabbing == true);
            		}
            		else {
HXLINE(  95)			_hx_tmp1 = false;
            		}
HXDLIN(  95)		if (_hx_tmp1) {
HXLINE(  96)			this->droppingMinawan = true;
HXLINE(  97)			this->grabbing = false;
            		}
HXLINE( 100)		if (this->droppingMinawan) {
HXLINE( 101)			bool hasCollided = true;
HXLINE( 103)			while((this->minawanGrabbed->y < ((( (Float)((::flixel::FlxG_obj::height - 30)) ) - (this->minawanGrabbed->scale->x * ( (Float)(10) ))) + this->offset))){
HXLINE( 104)				 ::Minawan fh = this->minawanGrabbed;
HXDLIN( 104)				fh->set_y((fh->y + ((Float)0.5)));
HXLINE( 105)				hasCollided = false;
            			}
HXLINE( 108)			if (hasCollided) {
HXLINE( 109)				this->grabbing = false;
HXLINE( 110)				this->minawanGrabbed = null();
HXLINE( 111)				this->droppingMinawan = false;
            			}
            		}
HXLINE( 117)		if (this->grabbing) {
HXLINE( 118)			this->minawanGrabbed->set_x(( (Float)(::flixel::FlxG_obj::mouse->x) ));
HXLINE( 119)			this->minawanGrabbed->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,minawanGrabbing,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new() {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(minawanSprites,"minawanSprites");
	HX_MARK_MEMBER_NAME(amountOfCharacters,"amountOfCharacters");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(grabbing,"grabbing");
	HX_MARK_MEMBER_NAME(minawanGrabbed,"minawanGrabbed");
	HX_MARK_MEMBER_NAME(droppingMinawan,"droppingMinawan");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(minawanSprites,"minawanSprites");
	HX_VISIT_MEMBER_NAME(amountOfCharacters,"amountOfCharacters");
	HX_VISIT_MEMBER_NAME(direction,"direction");
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(grabbing,"grabbing");
	HX_VISIT_MEMBER_NAME(minawanGrabbed,"minawanGrabbed");
	HX_VISIT_MEMBER_NAME(droppingMinawan,"droppingMinawan");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grabbing") ) { return ::hx::Val( grabbing ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return ::hx::Val( direction ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minawanSprites") ) { return ::hx::Val( minawanSprites ); }
		if (HX_FIELD_EQ(inName,"minawanGrabbed") ) { return ::hx::Val( minawanGrabbed ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"droppingMinawan") ) { return ::hx::Val( droppingMinawan ); }
		if (HX_FIELD_EQ(inName,"minawanGrabbing") ) { return ::hx::Val( minawanGrabbing_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"amountOfCharacters") ) { return ::hx::Val( amountOfCharacters ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"grabbing") ) { grabbing=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minawanSprites") ) { minawanSprites=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minawanGrabbed") ) { minawanGrabbed=inValue.Cast<  ::Minawan >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"droppingMinawan") ) { droppingMinawan=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"amountOfCharacters") ) { amountOfCharacters=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("minawanSprites",59,13,e7,a4));
	outFields->push(HX_("amountOfCharacters",99,62,73,5f));
	outFields->push(HX_("direction",3f,62,40,10));
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("grabbing",8c,9b,d4,fe));
	outFields->push(HX_("minawanGrabbed",80,37,1e,b0));
	outFields->push(HX_("droppingMinawan",d4,c5,8a,e0));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(PlayState_obj,minawanSprites),HX_("minawanSprites",59,13,e7,a4)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,amountOfCharacters),HX_("amountOfCharacters",99,62,73,5f)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,direction),HX_("direction",3f,62,40,10)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,grabbing),HX_("grabbing",8c,9b,d4,fe)},
	{::hx::fsObject /*  ::Minawan */ ,(int)offsetof(PlayState_obj,minawanGrabbed),HX_("minawanGrabbed",80,37,1e,b0)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,droppingMinawan),HX_("droppingMinawan",d4,c5,8a,e0)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("minawanSprites",59,13,e7,a4),
	HX_("amountOfCharacters",99,62,73,5f),
	HX_("direction",3f,62,40,10),
	HX_("offset",93,97,3f,60),
	HX_("grabbing",8c,9b,d4,fe),
	HX_("minawanGrabbed",80,37,1e,b0),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("droppingMinawan",d4,c5,8a,e0),
	HX_("minawanGrabbing",a1,6a,55,6a),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

